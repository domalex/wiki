created: 20200522084029687
modified: 20200916125716495
tags: archlinux
title: ArchLinux Installation Basissystem
type: text/vnd.tiddlywiki

[[Arch My Way - YouTube|https://www.youtube.com/playlist?list=PLTeOo_Khba2O1IOlAqV7S2t6H1BXjLrkH]]

Hinweis: Arch Linux kann von einem bereits installierten Arch Linux-System installiert werden. Dazu `arch-install-scripts` installieren.

! Live-System booten

USB-Live-System im UEFI-Mode booten. Im Bios unter Boot-Optionen kontrollieren, dass der UEFI-Eintrag gebootet wird. Vor dem Device-Namen muss UEFI stehen.

!! System auf deutsch umstellen

Evtl. Installer durchlaufen und nach Umstellung abbrechen.

Mindestens Tastatur umstellen:

```
loadkeys de
loadkeys de_CH-latin1
```

!! Netzwerkverbindung erstellen

mit NetworkManager

Network Manager Terminal User Interface:

```
nmtui
```

oder

```
wifi-menu
```

Eigene IP-Adresse überprüfen:

```
ip a
```

!! Network Time Protocol synchronisieren

```
timedatectl set-ntp true
```

!! UEFI-Mode

Vergewissern, dass im UEFI-Mode gebootet wurde.

Terminal öffnen oder falls in Desktopumgebung mit ctrl+alt+F2 in tty wechseln.

login: root

```
efivar -l
```

Falls etwas aufgelisted wird, wurde der Rechner im UEFI-Mode gestartet und mit der Installation kann begonnen werden.

Mit ctrl+alt+F7 gelangt man wieder zum Desktop.

! ArchLinux installieren

Den Terminal öffnen und die [[Anleitung für Einsteiger – wiki.archlinux.de|https://wiki.archlinux.de/title/Anleitung_für_Einsteiger]] im Browser öffnen. Beides nebeneinander anordnen.

Root werden:

```
sudo su
```

[[Datenträger anzeigen]]

!! Partitionieren

[[ArchLinux Installation Partitionsschema]]

Partitionen:

# EFI ''256M''
# BTRFS 465.8G (SSD) - 16G (SWAP) = ''450G''
# SWAP Rest (ca. ''16G'' bei 32G Arbeitsspeicher)

Block-Geräte anzeigen:

```
lsblk
```

UEFI-Systeme mit einer GPT-Partitionstabelle werden mit `gdisk` oder `fdisk` erstellt.

[[ArchLinux Installation Partitionierung fdisk]]

[[ArchLinux Installation Partitionierung gdisk]]

[[Datenträger anzeigen]]

!! Formatieren

```
mkfs.vfat -F 32 -n EFI /dev/nvme0n1p1
```

```
mkfs.btrfs -f -L ROOT /dev/nvme0n1p2
```

```
mkswap -L SWAP /dev/nvme01p3
swapon /dev/nvme0n1p3
```

SWAP überprüfen:

```
free -h
```

!! Btrfs-Subvolumes

''Nächstes Mal: Subvolume-Logik in [[Arch auf BtrFS – wiki.archlinux.de|https://wiki.archlinux.de/title/Arch_auf_BtrFS]] berücksichtigen!:''

Das Subvolume für das Root-Verzeichnis wird `arch` genannt. Somit können später auch Subvolumes für weitere Root-Verzeichnisse anderer Linux-Distributionen erstellt werden z. B. `debian`.

Beim Backup sollten einige Ordner in `var` ausgeschlossen werden. Für diese sind die folgenden Subvolumes zu erstellen: `cache`, `log`, `spool`, `temp`.

Ausgeschlossen sollen auch das Home-Verzeichnis von Root `root` und `srv`. Somit auch für diese eigene Subvolumes erstellen.

Zusätzlich Subvolumes für `snapshots` und ein Home-Verzeichnis für den Arch-Benutzer: `niggi`. Darin werden die Arch-Konfigurtations-Dateien gespeichert. Für eine andere Linux-Distribution käme ein anderes zum Zuge. Darin wiederum mounted man die Benutzer-Unterordner: z. B. `Bilder`, `Dokumente`, `Musik`, `Projekte` etc., die wiederum eigene Subvolumes darstellen. Dieses Vorgehen macht das Backup des Home-Verzeichnisses kompliziert und ist nur notwendig, wenn weitere Distributionen installiert werden sollen.

Ein zusätzliches Subvolume `snapshots` für das Home-Verzeichnis des Benutzers ist meiner Meinung nach nur sinnvoll, falls Benutzer nicht Zugriff auf das `/brtrfs`-Verzeichnis nehmen sollen.

Vorausgesetzt 2 Datenträger wurden verwendet, einer für das Root-Verzeichnis von ArchLinux, das andere für Home-Verzeichnisse der Benutzer, entsprechen die beiden Subvolumes `arch_pool` und `home_pool` den Btrfs-Top-Level-Verzeichnissen der beiden Datenträger. Somit 
werden darin sämtliche Btrfs-Subvolumes angezeigt, die auf jedem Datenträger vorhanden ist. Bei einem einzigen Datenträger kann dies mit einem Subvolume namens `btrfs`, welches unter `/btrfs` oder `btrfs_pool` gemounted wird geschehen.

!!! Bewärte Methode nach "Arch My Way"

Btrfs-Subvolumes erstellen:

```
mount /dev/nvme0n1p2 /mnt
cd /mnt
```

Subvolume für `/`(evtl. `/@root_TESTING` zwecks späterer Rollback konfiguration):

```
btrfs sub create @
```

Subvolume für `/home`:

```
btrfs sub create @home
```

Subvolume für `/var/cache/pacman/pkg`:

```
btrfs sub create @pkg
```

Damit bei einem Rollback des Systems die Logdateien nicht verloren gehen. Subvolume für `/var/log`:

```
btrfs sub create @log
```

Für die spätere Installation von KVM (Virtuelle Maschine). Subvolume `/var/lib/libvirt/images`:

```
btrfs sub create @images
```

Evtl. Sammel-Subvolume für den Rollback des Systems. Hier werden später die Snapshots `@root_TESTING`, `@root_STABLE` und `@root_OLD-STABLE` abgelegt.

```
btrfs sub create @snapshots
```

Subvolumes überprüfen:

```
ls
```

Btrfs unmounten:

```
cd
umount /mnt
```

!! Mounten

Erstellte Partitionen und Subvolumes anhand geplantem System-Aufbau mounten.

Bei grossen Systemen (viele Terrabytes) als Mount-Option u. U. `space_cache=v2` verwenden.

''Bei der nächsten Installation anstelle `compress=lzo` `compress=zstd` ausprobieren.'' Mehr zum Thema: [[Arch auf BtrFS - fstab bearbeiten – wiki.archlinux.de|https://wiki.archlinux.de/title/Arch_auf_BtrFS#fstab_bearbeiten]]

```
mount -o noatime,ssd,space_cache,compress=lzo,subvol=@root_TESTING /dev/nvme0n1p2 /mnt

```

Mount-Ordner erstellen. Evtl. zusätzlich `.snapshots`:

`/btrfs` wird später als Default-Subvolume verwendet, also das oberste Level unseres Btrfs-Dateisystems.

```
mkdir -p /mnt/{boot,btrfs,home,var/cache/pacman/pkg,var/log,var/lib/libvirt/images}
ls /mnt
```

```
mount /dev/nvme0n1p1 /mnt/boot
mount -o noatime,ssd,space_cache,compress=lzo,subvolid=5 /dev/nvme0n1p2 /mnt/btrfs
mount -o noatime,ssd,space_cache,compress=lzo,subvol=@home /dev/nvme0n1p2 /mnt/home
mount -o noatime,ssd,space_cache,compress=lzo,subvol=@pkg /dev/nvme0n1p2 /mnt/var/cache/pacman/pkg
mount -o noatime,ssd,space_cache,compress=lzo,subvol=@log /dev/nvme0n1p2 /mnt/var/log/
mount -o noatime,ssd,space_cache,compress=lzo,subvol=@images /dev/nvme0n1p2 /mnt/var/lib/libvirt/images
```

Überprüfung:

```
df -Th
```

!! Basissystem

https://wiki.archlinux.de/title/Anleitung_für_Einsteiger#Installation_der_Basispakete

```
pacstrap /mnt base linux linux-firmware vim
```

!! Weitere Pakete

Für `systemd-boot` werden später folgende Pakete benötigt: `efibootmgr`, `dosfstools`, `gptfdisk`.

`dhcpcd` oder `networkmanager` (NetworkManager)

`gptfdisk`

 Also gleich mitinstallieren:

```
pacman --root /mnt -S btrfs-progs dosfstools bash-completion efibootmgr networkmanager netctl dialog base-devel linux-headers
```

!! fstab erzeugen

```
genfstab -Lp /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab
```

''Link geänderte fstab einfügen''

!! Rechnername und Localhost

Hinweis: `>` in Datei schreiben/überschreiben, `>>` innerhalb Datei anhängen (bestehendes geht nicht verloren)

Ins neu installierte System wechseln:

```
arch-chroot /mnt/
```

Rechnernamen:

```
echo archbox > /etc/hostname
```

Konfiguration von /etc/hosts:

Der zuvor konfigurierte Rechnername (archbox) in /etc/hostname muss hier verwendet werden. 

```
vim /etc/hosts
```

```
127.0.0.1 localhost
::1 localhost
127.0.1.1 archbox.localdomain archbox
```

!! Spracheinstellung

```
echo LANG=de_CH.UTF-8 > /etc/locale.conf
```

```
nano /etc/locale.gen
```

Folgende Einträge in [[nano]] suchen und das # am Anfang folgender Zeilen entfernen. Anschliessend speichern:

```
de_CH.UTF-8 UTF-8
en_DK.UTF-8 UTF-8
```

```
locale-gen
```

Tastaturbelegung festlegen:

```
echo KEYMAP=de_CH-latin1 > /etc/vconsole.conf
```

(Schriftart festlegen:)

```
echo FONT=lat9w-16 >> /etc/vconsole.conf
```

!! Zeiteinstellung

Zeitzone durch einen symbolischen Link festlegen:

[[System time - Time standard - ArchWiki|https://wiki.archlinux.org/index.php/System_time#Time_standard]]

```
ln -sf /usr/share/zoneinfo/Europe/Zurich /etc/localtime
```

Es ist empfohlen die Systemuhr auf UTC/GMT zu belassen.

Überprüfung der Einstellung:

```
timedatectl | grep local
RTC in local TZ: no
```

Rückstellung auf UTC/GTM:

```
timedatectl set-local-rtc 0
```

oder

```
hwclock -wu
```

(Unter Umständen Harware- mit Systemuhr synchronisieren):

```
hwclock --systohc
```

oder

```
timedatectl set-local-rtc 1
```

Automatische Zeiteinstellung aktivieren:

[[Anleitung für Einsteiger - Automatische Zeiteinstellung – wiki.archlinux.de|https://wiki.archlinux.de/title/Anleitung_f%C3%BCr_Einsteiger#Automatische_Zeiteinstellung]]

```
systemctl enable --now systemd-timesyncd.service
```

Zeit überprüfen:

```
date
```

Anschließend kann man die Hardwareuhr oder auch RTC oder CMOS-Uhr auf der Hauptplatine korrigieren.

```
hwclock -w --verbose
```

!! Hooks

Bei einer ''Btrfs Raid'' Installation kann man unter `Hooks=` `fsck` löschen. In jedem Fall aber `btrfs `vor Eintrag `filesystems` eintragen:

https://youtu.be/oT7gs2CmsnQ?list=PLTeOo_Khba2O1IOlAqV7S2t6H1BXjLrkH&t=1298

Damit die Spracheinstellungen auch in der Konsole und nicht nur in der graphischen Umgebung geladen werden `keymap keyboard` vor `btrfs` und `filesystems` zufügen. `keyboard` am Zeilenende löschen. `keymap` ist besonders bei verschlüsselten Systemen wichtig:

https://youtu.be/wqXg8LrxSAk?list=PLTeOo_Khba2PLTV7zEeLPSTYyDdwwLsdo&t=382

Änderungen speichern:

```
nano /etc/mkinitcpio.conf
```

Ohne Raid:

```
HOOKS=(base udev autodetect modconf block keymap keyboard filesystems fsck)
```

`initramfs` mit gemachten Änderungen neu erzeugen:

```
mkinitcpio -p linux
```

!! Benutzerverwaltung

Root-Passwort vergeben:

```
passwd
```

[[Anleitung für Einsteiger - Einen Benutzer hinzufügen und Gruppen wählen – wiki.archlinux.de|https://wiki.archlinux.de/title/Anleitung_f%C3%BCr_Einsteiger#Einen_Benutzer_hinzuf.C3.BCgen_und_Gruppen_w.C3.A4hlen]]

Benutzer hinzufügen:

```
useradd -m -g users -G wheel,audio,video -s /bin/bash niggi
passwd niggi
```

`-m`= `/home`-Verzeichnis wird erstellt für neuen Benutzer

`-g`= Hautpgruppe des neuen Benutzers

`-G`= zusätzliche Gruppen des neuen Benutzers

`-s`= Shell des Benutzers

zum Schluss den Benutzernamen angeben

Benutzer `sudo`-Berechtigung vergeben:

```
EDITOR=vim visudo
```

`#` entfernen vor `%wheel ALL=(ALL) ALL` und speichern.

Test:

Als ROOT ausloggen:

```
exit
```

Als normaler Benutzer einloggen

```
archbox login: niggi
passwort:
sudo su
passwort:
```

Nach erflogreichem Test kann man root deaktivieren, Passwort ablaufen lassen:

```
passwd -l root
```

!! Systemd-Boot

[[Systemd-boot – wiki.archlinux.de|https://wiki.archlinux.de/title/Systemd-boot]]

```
bootctl --path=/boot install
```

Kontrolle:

```
cd /boot/
ls
cd loader/
ls
```

Inhalt von `loader.conf` löschen:

```
nano loader.conf
```

Ersetzen mit:

```
default   arch-uefi
timeout   1
```

EFI-Booteintrag erzeugen:

```
cd entries/
nano arch-uefi_05-testing.conf
```

Inhalt:

```
title    Arch Linux Xfce
linux    /vmlinuz-linux
initrd   /initramfs-linux.img
options  root=LABEL=ROOT rootflags=subvol=@root_TESTING rw resume=LABEL=SWAP
```

Booteinträge bereinigen:

[[Arch My Way 1 - Grundsystem installieren|https://youtu.be/oT7gs2CmsnQ?list=PLTeOo_Khba2O1IOlAqV7S2t6H1BXjLrkH&t=1578]]

```
efibootmgr
```

!! `fstab` bereinigen

Bei der Verwendung von eindeutigen Labeln die `subvol=/@[]` sowie `subvolid=[]` aus den Einträgen löschen. Ausnahme `/btrfs` mit `subvolid=5`. Der Eintrag `subvol=@[]` genügt.

Durch den Rollback verändert sich später die `subvolid=[]` von `@root_TESTING`, `@root_STABLE` und `@root_OLDSTABLE`. Das Label bleibt dabei konstant.

`subvol=/@[]` ist doppelt mit `subvol=@[]` und wird daher entfernt. Das [[Script Update Rollback]] kann dadurch u. a. einfacher gehalten werden.

Nachdem ein Benutzer hinzugefügt wurde, kann zusätzlich eine [[RAM-Disk]] erstellt werden. Damit wird das Schreiben auf die SSD verringert.

```
nano /etc/fstab
```

[[fstab Beispiel]]

Weiterfahren mit:

[[ArchLinux Installation Rollback]]

[[ArchLinux Installation weitere nützliche Dienste]]

[[ArchLinux Installation von X]]

[[ArchLinux Installation Audio]]

[[ArchLinux Installation Xfce-Desktop]]